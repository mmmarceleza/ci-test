---
#------------------------------------------------------
#                        Header
#------------------------------------------------------
# Action name and Its triggers
name: App CI teste
on:
  pull_request:
    types:
      - "opened"
      - "synchronize"
      - "closed"
    branches:
      - master

#------------------------------------------------------
#                      Variables
#------------------------------------------------------
env:
  ECR_REPOSITORY: "samurai"
  AWS_REGION: "us-east-2"

#------------------------------------------------------
#                 Beginning of the jobs
#------------------------------------------------------
jobs:
  #------------------------------------------------------
  #              job 01 - Code Tests
  #------------------------------------------------------

  #------------------------------------------------------
  #              job 02 - Dockerfile Linter
  #------------------------------------------------------
  lint:
    name: Dockerfile Linter
    runs-on: ubuntu-18.04
    steps:
      #---------------------step 02-01-----------------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 02-02-----------------------
      - uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: dockerfile
      #---------------------step 02-03-----------------------
      - name: Secrets
        run: |
          echo ${{ secrets.MY_NAME}}
          echo ${{ secrets.MY_NAME}} | base64

  #------------------------------------------------------
  #                 job 03 - Build Image
  #------------------------------------------------------
  build:
    name: Build Image
    needs: lint
    runs-on: ubuntu-18.04
    steps:
      #---------------------step 03-01-----------------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 03-02-----------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      #---------------------step 03-03-----------------------
      - name: Build and Export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: myimage:latest
          outputs: type=docker,dest=/tmp/myimage.tar
      #---------------------step 03-04-----------------------
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  #------------------------------------------------------
  #              job 04 - Image Scan with Trivy
  #------------------------------------------------------
  scan:
    name: Image Scan
    needs: build
    runs-on: ubuntu-18.04
    steps:
      #---------------------step 04-01-----------------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 04-02-----------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      #---------------------step 04-03-----------------------
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      #---------------------step 04-04-----------------------
      - name: Load Image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      #---------------------step 04-05-----------------------
      - name: Image Scan with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: "myimage"
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

  #------------------------------------------------------
  # job 04 - Build e Push do container para o Docker Hub
  #------------------------------------------------------
  push:
    name: Publica a Imagem
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
    needs: [scan, test]
    runs-on: ubuntu-18.04
    steps:
      #---------------------step 04-01-----------------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 04-02-----------------------
      - name: Ativa QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64
      #---------------------step 04-03-----------------------
      - name: BuildX - Suporte remote-cache, secrets, etc...
        id: buildx
        uses: docker/setup-buildx-action@v1
      #---------------------step 04-04-----------------------
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      #---------------------step 04-05-----------------------
      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #---------------------step 04-07-----------------------
      - name: Create Short SHA Commit
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
      #---------------------step 04-08-----------------------
      - name: Create Image Tag
        run: echo "IMAGE_TAG=$SHORT_SHA-$(date --utc +%Y%m%d%H%M%S)" >> $GITHUB_ENV          
      #---------------------step 04-06-----------------------
      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_ORGANIZATION }}/app4:$IMAGE_TAG
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache


  # #------------------------------------------------------
  # # job 04 - Build e Push do container para o Docker Hub
  # #------------------------------------------------------
  # push:
  #   name: Publish the Image to AWS ECR
  #   if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
  #   needs: [scan]
  #   runs-on: ubuntu-18.04
  #   steps:
  #     #---------------------step 04-01-----------------------
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     #---------------------step 04-02-----------------------
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     #---------------------step 04-03-----------------------
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: myimage
  #         path: /tmp
  #     #---------------------step 04-04-----------------------
  #     - name: Load Image
  #       run: |
  #         docker load --input /tmp/myimage.tar
  #         docker image ls -a
  #     #---------------------step 04-05-----------------------
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #     #---------------------step 04-06-----------------------
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     #---------------------step 04-07-----------------------
  #     - name: Create Short SHA Commit
  #       run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
  #     #---------------------step 04-08-----------------------
  #     - name: Create Image Tag
  #       run: echo "IMAGE_TAG=$SHORT_SHA-$(date --utc +%Y%m%d%H%M%S)" >> $GITHUB_ENV
  #     #---------------------step 04-09-----------------------
  #     - name: Build, tag, and push image to Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       run: |
  #         # docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY}}:$IMAGE_TAG .
  #         docker tag myimage $ECR_REGISTRY/${{ env.ECR_REPOSITORY}}:$IMAGE_TAG
  #         docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY}}:$IMAGE_TAG
